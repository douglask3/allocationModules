9c9,10
< from water_balance import WaterBalance, SoilMoisture
---
> from plant_production_mcmurtrie import PlantProdModel
> from water_balance import WaterBalance, WaterLimitedNPP, SoilMoisture
54c55,59
<         
---
>         self.pp = PlantProdModel(self.control, self.params, self.state,
>                                  self.fluxes, self.met_data)
>         self.wl = WaterLimitedNPP(self.control, self.params, self.state,
>                                   self.fluxes)
> 
78c83,92
<         
---
>         # calculate water balance and adjust C production for any water stress.
>         # If we are using the MATE model then water stress is applied directly
>         # through the Ci:Ca reln, so do not apply any scalar to production.
>         if self.control.water_model == 1:
>             self.wb.calculate_water_balance(project_day, daylen)
>             # adjust carbon production for water limitations, all models except
>             # MATE!
>             if self.control.assim_model != 7:
>                 self.wl.adjust_cproduction(self.control.water_model)
> 
197,198c211,216
<         # Estimate photosynthesis 
<         if self.control.assim_model == "BEWDY":
---
>         # Estimate photosynthesis using an empirical model
>         if self.control.assim_model >=0 and self.control.assim_model <= 4:
>             self.pp.calculate_photosynthesis(project_day)
>         # Estimate photosynthesis using the mechanistic BEWDY model
>         elif self.control.assim_model >=5 and self.control.assim_model <= 6:
>             # calculate plant C uptake using bewdy
200c218,220
<         elif self.control.assim_model == "MATE":
---
>         # Estimate photosynthesis using the mechanistic MATE model. Also need to
>         # calculate a water availability scalar to determine Ci:Ca reln.
>         elif self.control.assim_model ==7:
323,324c343,344
<         
<         if self.control.model_optroot == True:    
---
>         if self.control.model_optroot == 1:    
>                     
