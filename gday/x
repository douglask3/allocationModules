5c5,6
< from utilities import float_gt, float_eq, clip
---
> from utilities import float_gt, float_eq
> from misc_funcs import clip
17c18
< 
---
>     
19c20
< 
---
>     
22c23
<     * McMurtrie, R. (1990) Water/nutrient interactions affecting the
---
>     * McMurtrie, R. (1990) Water/nutrient interactions affecting the 
25c26
< 
---
>     
27,42c28,29
<     def __init__(self, control, params, state, fluxes, met_data):
<         """
<         Parameters
<         ----------
<         control : integers, object
<             model control flags
<         params: floats, object
<             model parameters
<         state: floats, object
<             model state
<         fluxes : floats, object
<             model fluxes
<         met_data : floats, dictionary
<             meteorological forcing data
< 
<         """
---
>     def __init__(self, control, params, state, fluxes, met_data): 
>         
48,60c35,38
< 
<     def calculate_water_balance(self, day, daylen):
<         """ Calculate water balance
< 
<         Parameters:
<         ----------
<         day : int
<             project day.
<         daylen : float
<             length of day in hours.
< 
<         """
< 
---
>         
>     def calculate_water_balance(self, day, daylen): 
>         """ Calculate water balance """
>         
62,64c40,56
<         (leaf_temp, rain, sw_rad,
<             vpd, wind, net_rad, ca, press) = self.get_met_data(day, daylen)
< 
---
>         leaf_temp = self.met_data['tair'][day]     
>         rainfall = self.met_data['rain'][day]
>         sw_rad = self.met_data['sw_rad'][day]  
>         vpd = self.met_data['vpd_avg'][day] # daytime average
>         wind = self.met_data['wind'][day]
>         net_rad = self.calc_radiation(leaf_temp, sw_rad, daylen)
>         if self.control.co2_conc == 0:
>             co2 = self.met_data['amb_co2'][day]
>         elif self.control.co2_conc == 1:
>             co2 = self.met_data['ele_co2'][day]
>         
>         if ('atmos_press' in self.met_data and not 
>             self.met_data['atmos_press'] is None):
>             press = self.met_data['atmos_press'][day]
>         else:
>             press = None # use method below to calculate pressure
>         
68c60
<             self.calc_wue(vpd, ca)
---
>             self.calc_wue(vpd, co2)
71,73c63,65
<             self.calc_transpiration_penmon(vpd, net_rad, leaf_temp, wind,
<                                                 ca, daylen, press)
<             self.calc_wue(vpd, ca)
---
>             self.calc_transpiration_penmon(vpd, net_rad, leaf_temp, wind, 
>                                                 co2, daylen, press)
>             self.calc_wue(vpd, co2)
76,79c68,71
<             self.calc_wue(vpd, ca)
< 
<         self.calc_infiltration(rain)
<         self.fluxes.soil_evap = self.calc_soil_evaporation(leaf_temp, net_rad,
---
>             self.calc_wue(vpd, co2)
>         
>         self.calc_infiltration(rainfall)
>         self.fluxes.soil_evap = self.calc_soil_evaporation(leaf_temp, net_rad, 
81c73
<         self.fluxes.et = (self.fluxes.transpiration + self.fluxes.soil_evap +
---
>         self.fluxes.et = (self.fluxes.transpiration + self.fluxes.soil_evap + 
83,84c75,76
< 
< 
---
>     
>         
87,137c79,80
< 
<     def get_met_data(self, day, daylen):
<         """ Grab the days met data out of the structure and return day values.
< 
<         Parameters:
<         ----------
<         day : int
<             project day.
<         daylen : float
<             length of day in hours.
< 
<         Returns:
<         -------
<         leaf_temp : float
<             average daytime temperature [degC]
<         rain : float
<             rainfall [mm d-1]
<         sw_rad : float
<             sw down radiation [mj m-2 day-1]
<         vpd : float
<             average daily vpd [kPa]
<         ca : float
<             atmospheric co2, depending on flag set in param file this will be
<             ambient or elevated. [umol mol-1]
<         wind : float
<             average daily wind speed [mm s-1]
<         press : float
<             average daytime pressure [kPa]
< 
<         """
<         leaf_temp = self.met_data['tair'][day]
<         rain = self.met_data['rain'][day]
<         sw_rad = self.met_data['sw_rad'][day]
<         vpd = self.met_data['vpd_avg'][day] # daytime average
<         wind = self.met_data['wind'][day]
<         net_rad = self.calc_radiation(leaf_temp, sw_rad, daylen)
< 
<         if self.control.co2_conc == 0:
<             ca = self.met_data['amb_co2'][day]
<         elif self.control.co2_conc == 1:
<             ca = self.met_data['ele_co2'][day]
< 
<         if ('atmos_press' in self.met_data and not
<             self.met_data['atmos_press'] is None):
<             press = self.met_data['atmos_press'][day]
<         else:
<             press = None # use method below to calculate pressure
< 
<         return (leaf_temp, rain, sw_rad, vpd, wind, net_rad, ca, press)
< 
<     def calc_wue(self, vpd, ca):
---
>        
>     def calc_wue(self, vpd, co2):
139c82
< 
---
>         
141,149d83
< 
<         Parameters:
<         -----------
<         vpd : float
<             average daily vpd [kPa]
<         ca : float
<             atmospheric co2, depending on flag set in param file this will be
<             ambient or elevated. [umol mol-1]
< 
155,156c89,90
<                 # WUE Power law dependence on co2, Pepper et al 2005.
<                 co2_ratio = (ca / self.params.ambient_co2)
---
>                 # WUE Power law dependence on co2, Pepper et al 2005. 
>                 co2_ratio = (co2 / self.params.ambient_co2)
158c92
< 
---
>             
163c97
<         elif self.control.wue_model == 1 and self.control.assim_model == 7:
---
>         elif self.control.wue_model == 1 and self.control.model_number == 7:
165,166c99,100
<             self.fluxes.wue = (conv * 1000.0 * (ca * const.UMOL_TO_MOL *
<                                 (1.0 - self.fluxes.cica_avg) /
---
>             self.fluxes.wue = (conv * 1000.0 * (co2 * const.UMOL_TO_MOL * 
>                                 (1.0 - self.fluxes.cica_avg) / 
168c102
<                         #if self.fluxes.wue > 20.0: self.fluxes.wue = 20.0    # FIX THIS!!!
---
> 			#if self.fluxes.wue > 20.0: self.fluxes.wue = 20.0    # FIX THIS!!!
170c104
< 
---
>             
172,173c106,107
<             self.fluxes.wue = (self.params.wue0 * 0.27273 / vpd *
<                                 ca / self.params.ambient_co2)
---
>             self.fluxes.wue = (self.params.wue0 * 0.27273 / vpd * 
>                                 co2 / self.params.ambient_co2)      
174a109
>             # Does this needs units adjusting?
178c113
<                 self.fluxes.wue = (self.fluxes.gpp_gCm2 /
---
>                 self.fluxes.wue = (self.fluxes.gpp_gCm2 / 
182,183c117,118
< 
<     def calc_infiltration(self, rain):
---
>             
>     def calc_infiltration(self, rainfall):
185c120
< 
---
>         
187,195c122,124
<         and therefore canopy storage capacity (wetloss). Interception is
<         likely to be ("more") erroneous if a canopy is subject to frequent daily
<         rainfall I would suggest.
< 
<         Parameters:
<         -------
<         rain : float
<             rainfall [mm d-1]
< 
---
>         and therefore canopy storage capacity (wetloss). Interception is 
>         likely to be erroneous if a canopy is subject to frequent daily 
>         rainfall I would guess.
197,198c126,127
< 
<         if float_gt(rain, 0.0):
---
>     
>         if float_gt(rainfall, 0.0):
200c129
<             self.fluxes.interception = clip(self.fluxes.interception,
---
>             self.fluxes.interception = clip(self.fluxes.interception, 
202,204c131,133
<                                             max=rain)
< 
<             self.fluxes.erain = (rain * self.params.rfmult -
---
>                                             max=rainfall)
>             
>             self.fluxes.erain = (rainfall * self.params.rfmult - 
209,210c138,139
< 
< 
---
>     
>     
213c142
< 
---
>         
215,216c144,145
<             self.fluxes.transpiration = self.fluxes.gpp_gCm2 / self.fluxes.wue
<         else:
---
>             self.fluxes.transpiration = self.fluxes.gpp_gCm2 / self.fluxes.wue 
>         else: 
218c147
< 
---
>         
221,231c150
<         units (mm/day)
< 
<         Parameters:
<         -----------
<         tavg : float
<             average daytime temp [degC]
<         net_rad : float
<             net radiation [mj m-2 day-1]
<         press : float
<             average daytime pressure [kPa]
< 
---
>         units (mm/day) 
236,237c155,156
< 
<     def calc_transpiration_penmon(self, vpd, net_rad, avg_temp, wind, ca,
---
>         
>     def calc_transpiration_penmon(self, vpd, net_rad, avg_temp, wind, co2, 
240,259c159
<         units mm/day
< 
<         Parameters:
<         -----------
<         vpd : float
<             average daily vpd [kPa]
<         net_rad : float
<             net radiation [mj m-2 day-1]
<         avg_temp : float
<             average daytime temp [degC]
<         wind : float
<             average daily wind speed [mm s-1]
<         ca : float
<             atmospheric co2, depending on flag set in param file this will be
<             ambient or elevated. [umol mol-1]
<         daylen : float
<             daylength in hours
<         press : float
<             average daytime pressure [kPa]
< 
---
>         units mm/day 
265,269c165,169
< 
<         self.fluxes.gs = self.calc_stomatal_conductance(press, avg_temp,
<                                                             vpd, ca, daylen)
< 
< 
---
>             
>         self.fluxes.gs = self.calc_stomatal_conductance(press, avg_temp, 
>                                                             vpd, co2, daylen)
>         
>         
273,276c173,175
< 
<         (self.fluxes.transpiration, 
<             self.fluxes.ga_gc_ratio) = P.calc_evaporation(vpd, wind, gc,
<                                                         net_rad, avg_temp,
---
>         
>         self.fluxes.transpiration = P.calc_evaporation(vpd, wind, gc, 
>                                                         net_rad, avg_temp, 
278,279c177,178
< 
<     def calc_stomatal_conductance(self, press, avg_temp, vpd, ca, daylen):
---
>         
>     def calc_stomatal_conductance(self, press, avg_temp, vpd, co2, daylen):
283c182
< 
---
>         
285,306c184
<         References:
<         -----------
<         * Jones (1992) Plants and microclimate, pg 56 + Appendix 3
< 
<         Parameters:
<         -----------
<         vpd : float
<             average daily vpd [kPa]
<         avg_temp : float
<             average daytime temp [degC]
<         vpd : float
<             vapour pressure def [kPa]
<         ca : float
<             atmospheric co2, depending on flag set in param file this will be
<             ambient or elevated. [umol mol-1]
<         daylen : float
<             daylength in hours
< 
<         Returns:
<         --------
<         gs : float
<             stomatal conductance [m s-1]
---
>         see Jones (1992) Plants and microclimate, pg 56 + Appendix 3
309,310c187,188
<         tconv = 1.0 / (60.0 * 60.0 * daylen)
<         gpp_umol_m2_sec = (self.fluxes.gpp_gCm2 * const.GRAMS_C_TO_MOLE_C *
---
>         tconv = 1.0 / (60.0 * 60.0 * daylen) 
>         gpp_umol_m2_sec = (self.fluxes.gpp_gCm2 * const.GRAMS_C_TO_MOLE_C * 
312c190
< 
---
>     
314,315c192,193
<         co2_umol_mol = ca
< 
---
>         co2_umol_mol = co2
>         
318,319c196,197
<         gs_mol_m2_sec = arg1 * arg2
< 
---
>         gs_mol_m2_sec = arg1 * arg2 
>         
321,323c199,201
<         conv = ((const.RGAS * (avg_temp + const.DEG_TO_KELVIN)) /
<                 (press * const.KPA_2_PA))
< 
---
>         conv = ((const.RGAS * (avg_temp + const.DEG_TO_KELVIN)) / 
>                 (press * const.KPA_2_PA))    
>         
325,326c203,204
<         return gs_mol_m2_sec * const.MOL_TO_MILLIMOLES * conv * const.MM_TO_M
< 
---
>         return gs_mol_m2_sec * const.MOL_TO_MILLIMOLES * conv * const.MM_TO_M 
>         
330,332c208
< 
<         References:
<         -----------
---
>         
335,349d210
< 
<         Parameters:
<         -----------
<         avg_temp : float
<             average daytime temp [degC]
<         sw_rad : float
<             sw down radiation [mj m-2 d-1]
<         daylen : float
<             daylength in hours
< 
<         Returns:
<         --------
<         net_rad : float
<             net radiation [mj m-2 day-1]
< 
353c214
<         # units: mj/m2/d
---
>         # units: mj/m2/d 
355c216
< 
---
>         
357,361c218,222
< 
<         # Surface radiation is reduced by overstory LAI cover. This empirical
<         # fit comes from Ritchie (1972) and is formed by a fit between the LAI
<         # of 5 crops types and the fraction of observed net radiation at the
<         # surface. Whilst the LAI does cover a large range, nominal 0–6, there
---
>         
>         # Surface radiation is reduced by overstory LAI cover. This empirical 
>         # fit comes from Ritchie (1972) and is formed by a fit between the LAI 
>         # of 5 crops types and the fraction of observed net radiation at the 
>         # surface. Whilst the LAI does cover a large range, nominal 0–6, there 
366c227
< 
---
>         
368,369c229,230
< 
< 
---
>     
>     
373c234
< 
---
>         
375,376c236,237
<         radiation term is scaled for the canopy cover passed to this func and
<         the impact of soil wetness is accounted for in the wtfac term. As the
---
>         radiation term is scaled for the canopy cover passed to this func and 
>         the impact of soil wetness is accounted for in the wtfac term. As the 
378c239
< 
---
>         
380,383c241,244
< 
<         * When plant provides shade for the soil surface, evaporation will not
<         be the same as bare soil evaporation. Wind speed, net radiation and VPD
<         will all belowered in proportion to the canopy density. Following
---
>     
>         * When plant provides shade for the soil surface, evaporation will not 
>         be the same as bare soil evaporation. Wind speed, net radiation and VPD 
>         will all belowered in proportion to the canopy density. Following 
386,388c247,249
< 
<         These assumptions are based on work with crops and whether this holds
<         for tree shading where the height from the soil to the base of the
---
>     
>         These assumptions are based on work with crops and whether this holds 
>         for tree shading where the height from the soil to the base of the 
390,394c251
< 
<         units = (mm/day)
< 
<         References:
<         -----------
---
>         
396,410c253,254
< 
<         Parameters:
<         -----------
<         avg_temp : float
<             average daytime temp [degC]
<         net_rad : float
<             net radiation [mj m-2 day-1]
<         press : float
<             average daytime pressure [kPa]
< 
<         Returns:
<         --------
<         soil_evap : float
<             soil evaporation [mm d-1]
< 
---
>         
>         units = (mm/day) 
414,415c258,259
< 
<         # if the available soil moisture is low the soil evaporation needs to
---
>         
>         # if the available soil moisture is low the soil evaporation needs to 
417,418c261,262
<         wtfac = (((self.state.pawater_tsoil / self.params.wcapac_topsoil) -
<                     self.params.fwpmin) /
---
>         wtfac = (((self.state.pawater_tsoil / self.params.wcapac_topsoil) - 
>                     self.params.fwpmin) / 
420c264
< 
---
>         
423c267
< 
---
>         
425,426c269,270
<         """ Calculate root and top soil plant available water
< 
---
>         """ Calculate root and top soil plant available water 
>         
432,433c276,277
<         self.state.pawater_root += (self.fluxes.erain -
<                                         self.fluxes.transpiration -
---
>         self.state.pawater_root += (self.fluxes.erain - 
>                                         self.fluxes.transpiration - 
435c279
<         self.state.pawater_root = clip(self.state.pawater_root, min=0.0,
---
>         self.state.pawater_root = clip(self.state.pawater_root, min=0.0, 
437c281
< 
---
>         
439,441c283,285
<         self.state.pawater_tsoil += (self.fluxes.erain -
<                                         self.fluxes.transpiration *
<                                         self.params.fractup_soil -
---
>         self.state.pawater_tsoil += (self.fluxes.erain - 
>                                         self.fluxes.transpiration * 
>                                         self.params.fractup_soil - 
443c287
< 
---
>                                
446c290
< 
---
>         
448,451c292,294
<         """ In reality this is a combined drainage and runoff calculation, i.e.
<         "outflow"
< 
<         There is no drainage out of the "bucket" soil therefore this will be
---
>         """ In reality this is a combined drainage and runoff calculation.
>         
>         There is no drainage out of the "bucket" soil therefore this will be 
453,458d295
< 
<         Returns:
<         --------
<         outflow : float
<             outflow [mm d-1]
< 
460,461c297,298
<         arg = (self.state.pawater_root + self.fluxes.erain -
<                 self.fluxes.et - self.fluxes.soil_evap -
---
>         arg = (self.state.pawater_root + self.fluxes.erain - 
>                 self.fluxes.et - self.fluxes.soil_evap - 
464,501c301,302
< 
<     def calculate_soil_water_fac(self):
<         """ Estimate a relative water availability factor [0..1]
< 
<         A drying soil results in physiological stress that can induce stomatal
<         closure and reduce transpiration. Further N mineralisation depends on 
<         top soil moisture.
< 
<         References:
<         -----------
<         * Pepper et al. (2008) Functional Change Biology, 35, 493-508
< 
<         But similarly see:
<         * van Genuchten (1981) Soil Sci. Soc. Am. J, 44, 892--898.
<         * Wang and Leuning (1998) Ag Forest Met, 91, 89-111.
< 
<         Returns:
<         --------
<         wtfac_tsoil : float
<             water availability factor for the top soil [0,1]
<         wtfac_root : float
<             water availability factor for the root zone [0,1]    
<         """
<         # turn into fraction...
<         smc_root = self.state.pawater_root / self.params.wcapac_root
<         smc_topsoil = self.state.pawater_tsoil / self.params.wcapac_topsoil
< 
<         # Calculate a soil moisture availability factor, used to adjust
<         # ci/ca ratio in the face of limited water supply.
<         arg = self.params.fwpmax - self.params.fwpmin
<         wtfac_tsoil = (smc_topsoil - self.params.fwpmin) / arg
<         wtfac_root = (smc_root - self.params.fwpmin) / arg
< 
<         return (clip(wtfac_tsoil, min=0.0, max=1.0), 
<                 clip(wtfac_root, min=0.0, max=1.0))
< 
< 
< 
---
> 	    
> 	    
504,505c305,306
< 
<     Water limited growth depends on the maximum rate of which water can
---
>     
>     Water limited growth depends on the maximum rate of which water can 
507,521c308,309
<     """
<     def __init__(self, control, params, state, fluxes):
<         """
<         Parameters
<         ----------
<         control : integers, object
<             model control flags
<         params: floats, object
<             model parameters
<         state: floats, object
<             model state
<         fluxes : floats, object
<             model fluxes
< 
<         """
---
>     """    
>     def __init__(self, control, params, state, fluxes): 
526c314
< 
---
>     
529c317
< 
---
>         
532,537d319
< 
<         Parameters:
<         -----------
<         option : integer
<             model option
< 
548,549c330,331
< 
<     def monteith_rescap_model(self):
---
>             
>     def monteith_rescap_model(self):        
551,552c333,334
< 
<         light or water limited and this depends on the plants ability to
---
>         
>         light or water limited and this depends on the plants ability to 
555c337
< 
---
>     
561,564c343,346
< 
<         growth_water_lim = (self.fluxes.wue * self.params.extraction /
<                                 100.0 * rootz * self.state.pawater_root)
< 
---
>             
>         growth_water_lim = (self.fluxes.wue * self.params.extraction / 
>                                 100.0 * rootz * self.state.pawater_root)  
>         
568c350
< 
---
>         
571c353
< 
---
>     
574,575c356,362
<         self.fluxes.npp *= self.state.wtfac_root
< 
---
>         wtfac = (((self.state.pawater_root / self.params.wcapac_root) - 
>                     self.params.fwpmin) / 
>                     (self.params.fwpmax - self.params.fwpmin))
>         
>         # limit growth, make sure wtfac is scaled btw 0 and 1 
>         self.fluxes.npp *= clip(wtfac, min=0.0, max=1.0)
>         
578c365
< 
---
>         
580c367
< 
---
>         
582c369
<         # the original code has this setup identical to the biomass model, are
---
>         # the original code has this setup identical to the biomass model, are 
586c373
< 
---
>     
589c376
< 
---
>     
593c380
<     (1/gc). If the surface is wet then there is a further water vapour flux
---
>     (1/gc). If the surface is wet then there is a further water vapour flux 
595,597c382,384
< 
<     Assumes inputs are measured at a 2m screen height, though you can change
<     this with the the class initialisation. I have ignored the soil heat
---
>     
>     Assumes inputs are measured at a 2m screen height, though you can change 
>     this with the the class initialisation. I have ignored the soil heat 
599c386
< 
---
>     
601c388
< 
---
>     
603,607c390,395
< 
<     References:
<     -----------
<     * Monteith and Unsworth (1990) Principles of Environmental
<       Physics, pg. 247. Although I have removed the soil heat flux as G'DAY calculates soil evaporation seperately.
---
>     
>     Refs
>     ====
>     * Monteith and Unsworth (1990) Principles of Environmental 
>     Physics, pg. 247. Although I have removed the soil heat flux as G'DAY 
>     calculates soil evaporation seperately.
609,617c397,405
<       Agronomy Journal, 81, 650-662.
<     * Allen et al. (1998) Crop evapotranspiration - Guidelines for computing
<       crop water requirements - FAO Irrigation and drainage paper 56.
<       http://www.fao.org/docrep/X0490E/x0490e00.htm#Contents. PDF in bibtex lib.
<     * Harrison (1963) Fundamentals concepts and definitions relating to
<       humidity. In Wexler, A. (Ed.) Humidity and moisture. Vol 3, Reinhold
<       Publishing Co., New York, NY, USA.
<     * Dawes and Zhang (2011) Waves - An integrated energy and water balance model
<       http://www.clw.csiro.au/products/waves/downloads/chap3.pdf
---
>     Agronomy Journal, 81, 650-662.
>     * Allen et al. (1998) Crop evapotranspiration - Guidelines for computing 
>     crop water requirements - FAO Irrigation and drainage paper 56. 
>     http://www.fao.org/docrep/X0490E/x0490e00.htm#Contents. PDF in bibtex lib.
>     * Harrison (1963) Fundamentals concepts and definitions relating to 
>     humidity. In Wexler, A. (Ed.) Humidity and moisture. Vol 3, Reinhold 
>     Publishing Co., New York, NY, USA. 
>     Dawes and Zhang (2011) Waves - An integrated energy and water balance model
>     http://www.clw.csiro.au/products/waves/downloads/chap3.pdf
622,647c410,415
< 
<         """
<         Parameters:
<         -----------
<         cp : float
<             specific heat of dry air [MJ kg-1 degC-1]
<         vk : float
<             von karman's constant [unitless]
<         epsilon : float
<             ratio molecular weight of water vap/dry air
<         zele_sea : float
<             elevation above sea level [m]
<         canht : float
<             canopy height [m]
<         dz0v_dh : float
<             rate change of roughness for momentum with height
<         displace_ratio : float
<             zero plain displacement height
< 
<         """
< 
<         self.cp = cp
<         self.vk = vk
< 
<         self.epsilon = epsilon
<         self.zele_sea = zele_sea
---
>     
>         self.cp = cp             # specific heat of dry air [MJ kg-1 degC-1]
>         self.vk = vk             # von karman's constant [unitless]
>         
>         self.epsilon = epsilon   # ratio molecular weight of water vap/dry air
>         self.zele_sea = zele_sea # elevation above sea level [m]
650,651c418,419
<         self.canht = canht
<         self.dz0v_dh = dz0v_dh
---
>         self.canht = canht       # [m]
>         self.dz0v_dh = dz0v_dh   # rate chg of roughness for momentum with ht
653c421
< 
---
>         
655,657c423,425
<         self.z0h_z0m = 0.1
< 
<     def calc_evaporation(self, vpd, wind_speed, gc, net_rad,
---
>         self.z0h_z0m = 0.1       
>         
>     def calc_evaporation(self, vpd, wind_speed, gc, net_rad, 
659,682c427,436
< 
<         """
<         Parameters:
<         -----------
<         vpd : float
<             vapour pressure def [kPa]
<         wind_speed : float
<             average daytime wind speed [m s-1]
<         gc : float
<             canopy conductance [m s-1]
<         net_rad : float
<             net radiation [mj m-2 day-1]
<         tavg : float
<             daytime average temperature [degC]
<         daylen : float
<             daylength in hours
<         press : float
<             average daytime pressure [kPa]
< 
<         Returns:
<         --------
<         et : float
<             evapotranspiration [mm d-1]
< 
---
>         
>         """ 
>         units: 
>         wind_speed -> [m s-1]
>         net_rad -> [MJ m-2 d-1]
>         press -> [kPa]
>         et -> [mm d-1]
>         gc -> [m s-1]
>         tavg -> [degC]
>         vpd -> [kPa]
687c441
< 
---
>        
692c446
< 
---
>         
695,697d448
< 
<         ga_gc_ratio = ga / gc
<         
699,702d449
< 
<         #print gc/math.log(vpd)
< 
< 
704,706c451,453
<         #e = slope / gamma # chg of latent heat relative to sensible heat of air
<         #omega = (e + 1.0) / (e + 1.0 + (ga / gc))
< 
---
>         e = slope / gamma # chg of latent heat relative to sensible heat of air
>         omega = (e + 1.0) / (e + 1.0 + (ga / gc))
>         
709,710c456,457
<         #fs = 1.0 - omega
< 
---
>         fs = 1.0 - omega
>         
712c459
< 
---
>         
714,715c461,462
<         tconv = (60.0 * 60.0 * daylen)
< 
---
>         tconv = (60.0 * 60.0 * daylen) 
>         
718c465
<             arg2 = slope + gamma * (1.0 + ga / gc)
---
>             arg2 = slope + gamma * (1.0 + ga / gc) 
722,724c469,471
< 
<         return et, ga_gc_ratio
< 
---
>         
>         return et
>     
726,727c473,474
<         """ Canopy boundary layer conductance for momentum, i.e. 1/ra
< 
---
>         """ Canopy boundary layer conductance for momentum, i.e. 1/ra 
>         
729,730c476,477
<         above the canopy is determined by aerodynamic conductance. Key
<         assumption is that roughness length for momentum and for heat are
---
>         above the canopy is determined by aerodynamic conductance. Key 
>         assumption is that roughness length for momentum and for heat are 
732,736c479,481
< 
<         Notes:
<         ------
<         'Estimates of ga for pine canopies from LAI of 3 to 6 vary from
<         3.5 to 1.1 mol m-2 s-1  (Kelliher et al., 1993; Juang et al., 2007).'
---
>         
>         'Estimates of ga for pine canopies from LAI of 3 to 6 vary from 
>         3.5 to 1.1 mol m-2 s-1	(Kelliher et al., 1993; Juang et al., 2007).' 
739,740c484,485
<         References:
<         ------------
---
>         
>         units: m s-1
742,752d486
< 
<         Parameters:
<         -----------
<         wind_speed : float
<             average daytime wind speed [m s-1]
< 
<         Returns:
<         --------
<         ga : float
<             canopy boundary layer conductance [m s-1]
< 
757c491
< 
---
>         
760,765c494,499
< 
<         arg1 = self.vk**2 * wind_speed
<         arg2 = (math.log((self.canht - d) / z0))**2
< 
<         return arg1 / arg2
< 
---
>         
>         arg1 = self.vk**2 * wind_speed 
>         arg2 = (math.log((self.canht - d) / z0))**2       
>         
>         return arg1 / arg2 
>         
767,768c501,502
<         """ (bulk) aerodynamic conductance
< 
---
>         """ (bulk) aerodynamic conductance, units: m s-1
>         
771,788c505,509
< 
<         References:
<         -----------
<         * Monteith and Unsworth (1990), pg. 248. Note this in the inverted form
<           of what is in Monteith (ga = 1 / ra)
<         * Allen et al. (1989) pg. 651.
<         * Gash et al. (1999) Ag forest met, 94, 149-158.
< 
<         Parameters:
<         -----------
<         wind_speed : float
<             average daytime wind speed [m s-1]
< 
<         Returns:
<         --------
<         ga : float
<             canopy boundary layer conductance [m s-1]
< 
---
>         
>         Monteith and Unsworth (1990), pg. 248. Note this in the inverted form
>         of what is in Monteith (ga = 1 / ra)
>         Allen et al. (1989) pg. 651.
>         Gash et al. (1999) Ag forest met, 94, 149-158.
789a511
>         
792c514
< 
---
>         
795c517
< 
---
>         
798c520
< 
---
>         
801c523
< 
---
>         
804,805c526,527
<         arg2 = (math.log((self.canht - d) / z0m) *
<                     math.log((self.canht - d) / z0h))
---
>         arg2 = (math.log((self.canht - d) / z0m) * 
>                     math.log((self.canht - d) / z0h)) 
807,808c529,530
<         #arg2 = (math.log((self.canht - d) / z0m) + math.log(z0m / z0h))
< 
---
>         #arg2 = (math.log((self.canht - d) / z0m) + math.log(z0m / z0h)) 
>         
810,811c532,533
< 
< 
---
>         
>     
813c535
<         """ Standard PM expects wind speed at a 2m height, need to adjust
---
>         """ Standard PM expects wind speed at a 2m height, need to adjust 
815,819c537,539
< 
<         References:
<         -----------
<         * Bos et al (2009) Water Requirements for Irrigation and the
<           Environment, pg. 29
---
>         
>         * Bos et al (2009) Water Requirements for Irrigation and the 
>         Environment, pg. 29
821,831c541,543
<           Aerodynamic_resistance.html
< 
<         Parameters:
<         -----------
<         wind_speed : float
<             wind speed [m s-1]
< 
<         Returns:
<         --------
<         wind_speed : float
<             adjusted wind speed for height [m s-1]
---
>             Aerodynamic_resistance.html
>         
>         units: m s-1
835c547
< 
---
>     
838,849c550,551
< 
<         Parameters:
<         -----------
<         tavg : float
<             average daytime temperature
< 
<         Returns:
<         --------
<         slope : float
<             slope of saturation vapour pressure curve [kPa degC-1]
< 
<         """
---
>         
>         units: kPa degC-1 """
854c556
< 
---
>     
856c558
<         """ Psychrometric constant ratio of specific heat of moist air at
---
>         """ Psychrometric constant ratio of specific heat of moist air at 
858,874c560,562
< 
<         References:
<         -----------
<         * Eqn 8 from FAO paper, Allen et al. 1998.
< 
<         Parameters:
<         -----------
<         lambdax : float
<              latent heat of water vaporization [MJ kg-1]
<         press : float
<             average daytime pressure [kPa]
< 
<         Returns:
<         --------
<         gamma : float
<             pyschrometric_constant [kPa degC-1]
< 
---
>         Eqn 8 from FAO paper, Allen et al. 1998.
>         
>         units: kPa degC-1
877c565
< 
---
>         
879,889c567,570
<         """ Pressure exerted by the weight of earth's atmosphere.
< 
<         References:
<         -----------
<         * Eqn 7 from FAO paper, Allen et al. 1998.
< 
<         Returns:
<         --------
<         press : float
<             modelled average daytime pressure [kPa]
< 
---
>         """ Pressure exerted by the weight of earth's atmosphere. 
>         Eqn 7 from FAO paper, Allen et al. 1998.
>         
>         units: kPa
892c573
< 
---
>     
894,899c575,576
<         """ After Harrison (1963), should roughly = 2.45 MJ kg-1
< 
<         Returns:
<         -----------
<         lambdax : float
<              latent heat of water vaporization [MJ kg-1]
---
>         """ After Harrison (1963), should roughly = 2.45 MJ kg-1 
>         * units: MJ kg-1 
902c579
< 
---
>     
906,916c583,584
<         is a better reference
< 
<         Parameters:
<         -----------
<         tavg : float
<             average daytime temperature [degC]
< 
<         Returns:
<         --------
<         density : float
<             density of air [kg m-3]
---
>         is a better reference 
>         units: kg m-3
919c587
< 
---
>         
921c589
<     """
---
>     """ 
924,928c592,598
< 
<     References
<     ----------
<     * Monteith and Unsworth (1990) Principles of Environmental
<       Physics, pg. 185-187.
---
>     
>     units: mm day-1
>     
>     Refs
>     ====
>     * Monteith and Unsworth (1990) Principles of Environmental 
>     Physics, pg. 185-187. 
930c600
< 
---
>     
932,948c602
<         """ Equilibrium evaporation
< 
<         Parameters:
<         -----------
<         net_rad : float
<             net radiation [mj m-2 day-1]
<         tavg : float
<             daytime average temperature [degC]
<         press : float
<             average daytime pressure [kPa]
< 
<         Returns:
<         --------
<         soil_evap : float
<             bare soil evaporation [mm day-1]
< 
<         """
---
>         """ Equilibrium evaporation """
951c605
< 
---
>             
955c609
< 
---
>         
960,962c614,616
< 
<     """
<     Calculate ET using Priestley Taylor, "potenial evaporation", i.e.
---
>     
>     """ 
>     Calculate ET using Priestley Taylor, "potenial evaporation", i.e. 
966c620
< 
---
>     
969c623,625
< 
---
>     
>     units: mm day-1
>     
971c627
<     Quoted range from literature for value is 1.2-1.3, although I have seen
---
>     Quoted range from literature for value is 1.2-1.3, although I have seen 
974,980c630,636
< 
< 
<     References:
<     -----------
<     * Priestley and Taylor (1972) On the assessment of surface heat flux and
<       evaporation using large-scale parameters. Monthly Weather Review, 100,
<       81-82.
---
>     
>     
>     Refs
>     ====
>     * Priestley and Taylor (1972) On the assessment of surface heat flux and 
>     evaporation using large-scale parameters. Monthly Weather Review, 100,
>     81-82.
982c638
< 
---
>     
984,1000c640
<         """
<         Parameters:
<         -----------
<         net_rad : float
<             net radiation [mj m-2 day-1]
<         tavg : float
<             daytime average temperature [degC]
<         press : float
<             average daytime pressure [kPa]
<         pt_coeff : float, optional
<             Priestley-Taylor coefficient
< 
<         Returns:
<         --------
<         transpiration : float
<             transpiration [mm day-1]
<         """
---
>         
1004c644
< 
---
>         
1005a646,647
>         
>     
